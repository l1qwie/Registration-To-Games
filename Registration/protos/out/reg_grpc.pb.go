// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: reg.proto

package out

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RegistrationClient is the client API for Registration service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegistrationClient interface {
	// Changes the table Schedule in Schedule (client)
	UpdSchedule(ctx context.Context, in *ScheduleServRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Changes the table Schedule in Media (client)
	UpdMediaSch(ctx context.Context, in *MediaServRequestSch, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Changes the table Schedule in Settings (client)
	UpdSettingSch(ctx context.Context, in *SettingServRequestSch, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Changes the table GamesWithUsers in Settings (client)
	UpdSettingGWU(ctx context.Context, in *SettingServRequestGWU, opts ...grpc.CallOption) (*EmptyResponse, error)
	// Changes the table Schedule in Registration (server)
	UpdReg(ctx context.Context, in *RegServRequest, opts ...grpc.CallOption) (*EmptyResponse, error)
}

type registrationClient struct {
	cc grpc.ClientConnInterface
}

func NewRegistrationClient(cc grpc.ClientConnInterface) RegistrationClient {
	return &registrationClient{cc}
}

func (c *registrationClient) UpdSchedule(ctx context.Context, in *ScheduleServRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/registr.Registration/UpdSchedule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdMediaSch(ctx context.Context, in *MediaServRequestSch, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/registr.Registration/UpdMediaSch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdSettingSch(ctx context.Context, in *SettingServRequestSch, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/registr.Registration/UpdSettingSch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdSettingGWU(ctx context.Context, in *SettingServRequestGWU, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/registr.Registration/UpdSettingGWU", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *registrationClient) UpdReg(ctx context.Context, in *RegServRequest, opts ...grpc.CallOption) (*EmptyResponse, error) {
	out := new(EmptyResponse)
	err := c.cc.Invoke(ctx, "/registr.Registration/UpdReg", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegistrationServer is the server API for Registration service.
// All implementations must embed UnimplementedRegistrationServer
// for forward compatibility
type RegistrationServer interface {
	// Changes the table Schedule in Schedule (client)
	UpdSchedule(context.Context, *ScheduleServRequest) (*EmptyResponse, error)
	// Changes the table Schedule in Media (client)
	UpdMediaSch(context.Context, *MediaServRequestSch) (*EmptyResponse, error)
	// Changes the table Schedule in Settings (client)
	UpdSettingSch(context.Context, *SettingServRequestSch) (*EmptyResponse, error)
	// Changes the table GamesWithUsers in Settings (client)
	UpdSettingGWU(context.Context, *SettingServRequestGWU) (*EmptyResponse, error)
	// Changes the table Schedule in Registration (server)
	UpdReg(context.Context, *RegServRequest) (*EmptyResponse, error)
	mustEmbedUnimplementedRegistrationServer()
}

// UnimplementedRegistrationServer must be embedded to have forward compatible implementations.
type UnimplementedRegistrationServer struct {
}

func (UnimplementedRegistrationServer) UpdSchedule(context.Context, *ScheduleServRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdSchedule not implemented")
}
func (UnimplementedRegistrationServer) UpdMediaSch(context.Context, *MediaServRequestSch) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdMediaSch not implemented")
}
func (UnimplementedRegistrationServer) UpdSettingSch(context.Context, *SettingServRequestSch) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdSettingSch not implemented")
}
func (UnimplementedRegistrationServer) UpdSettingGWU(context.Context, *SettingServRequestGWU) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdSettingGWU not implemented")
}
func (UnimplementedRegistrationServer) UpdReg(context.Context, *RegServRequest) (*EmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdReg not implemented")
}
func (UnimplementedRegistrationServer) mustEmbedUnimplementedRegistrationServer() {}

// UnsafeRegistrationServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegistrationServer will
// result in compilation errors.
type UnsafeRegistrationServer interface {
	mustEmbedUnimplementedRegistrationServer()
}

func RegisterRegistrationServer(s grpc.ServiceRegistrar, srv RegistrationServer) {
	s.RegisterService(&Registration_ServiceDesc, srv)
}

func _Registration_UpdSchedule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScheduleServRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdSchedule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registr.Registration/UpdSchedule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdSchedule(ctx, req.(*ScheduleServRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdMediaSch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MediaServRequestSch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdMediaSch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registr.Registration/UpdMediaSch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdMediaSch(ctx, req.(*MediaServRequestSch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdSettingSch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingServRequestSch)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdSettingSch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registr.Registration/UpdSettingSch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdSettingSch(ctx, req.(*SettingServRequestSch))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdSettingGWU_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SettingServRequestGWU)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdSettingGWU(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registr.Registration/UpdSettingGWU",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdSettingGWU(ctx, req.(*SettingServRequestGWU))
	}
	return interceptor(ctx, in, info, handler)
}

func _Registration_UpdReg_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegServRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegistrationServer).UpdReg(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/registr.Registration/UpdReg",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegistrationServer).UpdReg(ctx, req.(*RegServRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Registration_ServiceDesc is the grpc.ServiceDesc for Registration service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Registration_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "registr.Registration",
	HandlerType: (*RegistrationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdSchedule",
			Handler:    _Registration_UpdSchedule_Handler,
		},
		{
			MethodName: "UpdMediaSch",
			Handler:    _Registration_UpdMediaSch_Handler,
		},
		{
			MethodName: "UpdSettingSch",
			Handler:    _Registration_UpdSettingSch_Handler,
		},
		{
			MethodName: "UpdSettingGWU",
			Handler:    _Registration_UpdSettingGWU_Handler,
		},
		{
			MethodName: "UpdReg",
			Handler:    _Registration_UpdReg_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "reg.proto",
}
